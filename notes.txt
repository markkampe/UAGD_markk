
0. use vscode editor -> gvim

    open any project
    Edit > Preferences > External Tools
        browse > /usr/bin/gvim

1. Unity (Editor) Basics

    1.2 I created the project with a simple name, and put it in the phase 1 directory,
        which created the project under the phase 1 directory.  So I moved everything
        deleted from the list, and re-added from disk.  Next time I will try to create
        the project with same name in the top directory of the repo.

    1.3 download IntroToUnity package, unzip
        import into the project
        open playground scene, import TMP Essentials

    1.4 flythrough test
  >>    2. right mouse button down to pan around the scene
            scroll to move in/out
        3. double click an item to select/frame it
  >>       ALT+ left-click to orbit around framed object
                right-click to move forward/back
  >>    4. right-click +
            WASD: fwd/back/left/right
            QE: down/up
            mouse to turn up/down/left/right
  >>    5. F to frame (more convenient, takes me right there)
            click+f (rather than double-click)

    1.5 Scene Gizmo
        1. click an axis to view from that axis
            standard mouse controls to adjust viewpoint
        2. perspective vs orthographic
            ortho is unnatural, but much better for lining things up

    1.6 Add GameObjcts to a new scene
        1. rename and open the (provided) Empty Scene
        2. create a plane
        3. update Transform position to (0,0,0)
           (or more>Reset)
        4. create a cube
        5. move it to (0,4,0)

    1.7 Apply Materials
        1. create Ground material, set Basemap color (to dark lawn green)
        2. drag/drop that material to the plane (in the scene view)
        3. create Cube material, set Basemap color, drag/drop to cube (in scene view)

    1.8 Add physics and enter play mode
        1. Play and observe the floating cube
        2. select cube, add Rigidbody, Play and watch it fall
        3. rotate it, Play and watch it tumble

    1.9 Make more cubes using global & local coordinates
        1. duplicate cube a few times
           place others above original
           some in global coordinates, some in local
        2. Scale to adjust sizes
            along Z axis
            along Y axis
  >>        click cube at center and scale entire cube

    1.10 Add prefabs and other assets to scene
        1. choose from Assets>_IntroToUnity>Prefabs>Characters
            Play, walk around
        2. replace Main Camera
            Inspector > Main Camera > uncheck the enable box
            Play, walk around, see view from just behind character
        4. drag a few Prefabs into the scene
            Play, walk around, see what happens when we bump into them

    SUBMIT THROUGH GIT

        I started with a clone of a fork of the template workspace
        I created the project in the Unit 1 directory
        When done with the Unit 1 assignments I:
            git status
            git add (everything but Libraries, Logs and Temp)
            git commit, git/push

        The result was 132MB ... similar to size of imported unitypackage

        I then went to a new directory
            git clone (new clone)
            unityhub Add new project from disk
            select that project
            Play ... and it was all there

        This was a good exercise (using Git for Unity projects), but for
        the purposes of the class, the right thing to do for Unit 1 is to
        tell them how to film it and have them send me the video, since
        all they will do is navigate.

2. Make a Game

    2.1 Create basic Roll-a-ball game

        2.1.3 Create the project with the required name: "Rollaball",
            and place it in the "Unit_2-Make_a_Game" directory.

        2.1.4 create new scene
            File > New Scene: Basic URP, Create
            File > Save As: MiniGame (in Scenes)

        2.1.5 create a ground plane object
              named "Ground", at <0,0,0>, framed in scene (to enable adjustment)

        2.1.6 scale <2,1,2>

        2.1.7 create a player sphere
              named Player at <0,0.5,0>, framed in scene (to enable adjustment)

        2.1.8 adjust lighting
              switch from Scene view to Game view
              Light component, Emission module -> pure white (255,255,255)
              
        2.1.9 add colors w/materials
              create Assets/Materials folder
              create new Material "Background"
                Surface Inputs.Base Map = (130, 130, 130) light grey
                Smoothness = 0.25
              apply it to the Ground
                [NOTE:
                    If the object is in the Inspector, I can drag the material
                       into the Inspector window.
                    If I have the Scene (rather than Game) vies, I can select
                       the object and drag the material onto the object.
                ]

              create new Material "Player" (0, 220, 255), smoothness = 0.75
              applay it to the Player

              change Directional Light: Transform.Rotation = <50,50,0>
             
    2.2 Add a Rigidbody to the Player sphere and make it respond to player input

        2.2.2 Select Player, Add Component, Rigidbody

        2.2.3 Install Input System package
            Window > Package Manager
                select Unity Registry
                find Input System, Install
                (agree to restart, save)
        
        2.2.4 add player input component
            create Assets/Input folder
            selecte Player, Add Component: Player Input
                Create Actions (in Input folder) "Input Action"

        2.2.5 create new script
            create Assets/Scripts folder
            Player > Add Component > New Script "Player Controller"
            move it from Assets to Assets/Scripts

        2.2.6-8 add the OnMove and FixedUpdate methods
            :se ff=unix
            test the game (cursor motion should move the ball)

        2.2.9 add a speed variable, and multiply force by speed
              in Player.PlayerController, speed=10
                 [NOTE:
                    Interesting that a public variable in a script will appear
                    in the Inspector window for that script, and can be set
                    from within that window.
                ]
            

    2.3 Make the camera follow the Player sphere with a fixed offset

    2.4 Create walls to contain the game area

    2.5 Create collectibles

    2.6 Make object disappear when they collide w/Player sphere

    2.7 Keep score of collected objects

    2.8 Implement AI-based enemy navigation

    2.9 Build and export the game

    2.10 create a Game Design Document
