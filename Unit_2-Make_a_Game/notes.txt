
2. Make a Game

    2.1 Create basic Roll-a-ball game

        2.1.3 Create the project with the name: "Unit_2-Make_a_game"
            and place it in the top directory of repo.

            Edit>Project Settings>Player>Product Name = Rollaball

        2.1.4 create new scene
            File > New Scene: Basic URP, Create
            File > Save As: MiniGame (in Scenes)

        2.1.5-6 create a ground plane object
              named "Ground", at <0,0,0>, framed in scene (to enable adjustment)
              scale <2,1,2>

        2.1.7 create a player sphere
              named Player at <0,0.5,0>, framed in scene (to enable adjustment)

        2.1.8 adjust lighting
              switch from Scene view to Game view
              Light component, Emission module -> pure white (255,255,255)
              
        2.1.9 add colors w/materials
              create Assets/Materials folder
              create new Material "Background"
                Surface Inputs.Base Map = (130, 130, 130) light grey
                Smoothness = 0.25
              apply it to the Ground
                [NOTE:
                    If the object is in the Inspector, I can drag the material
                       into the Inspector window.
                    If I have the Scene (rather than Game) vies, I can select
                       the object and drag the material onto the object.
                ]

              create new Material "Player" (0, 220, 255), smoothness = 0.75
              applay it to the Player

              change Directional Light: Transform.Rotation = <50,50,0>
             
    2.2 Add a Rigidbody to the Player sphere and make it respond to player input

        2.2.2 Select Player, Add Component, Rigidbody

        2.2.3 Install Input System package
            Window > Package Manager
                select Unity Registry
                find Input System, Install
                (agree to restart, save)
        
        2.2.4 add player input component
            create Assets/Input folder
            selecte Player, Add Component: Player Input
                Create Actions (in Input folder) "Input Action"

        2.2.5 create new script
            create Assets/Scripts folder
            Player > Add Component > New Script "Player Controller"
            move it from Assets to Assets/Scripts

        2.2.6-8 add the OnMove and FixedUpdate methods
            :se ff=unix
            test the game (cursor motion should move the ball)

        2.2.9 add a speed variable, and multiply force by speed
              in Player.PlayerController, speed=10
                 [NOTE:
                    Interesting that a public variable in a script will appear
                    in the Inspector window for that script, and can be set
                    from within that window.
                ]
            
    2.3 Make the camera follow the Player sphere with a fixed offset
        
        2.3.2 raise & rotate the camera
            Select Main Camera, Ypos = 10, Xrot = 45
            look at Game View, see our new PoV

            subordinate the Main Camera to the Player
            play and see how camera chagnes w/motion
                cursor motions now seem to cause rotation?

        2.3.3 write a camera controller script
            Main Camera > Add Component > New Script CameraController
                move script into Scripts directory
            add the variables and methods

            initialize the reference to the player object
                Main Camera > Camera Controller > Player <- Player

            [NOTE:
                This is cute; In the past I have done a run-time object
                lookup.  But public variables are exposed in the script
                instance and I can drag the desired object into the
                desired variable.
            ]

            play, and observe camera following the ball
    
    2.4 Create walls to contain the game area

        2.4.2 create (empty) GameObject: "Walls"
              create a Cube under it, labeled West Wall
                scale = <0.5, 2, 20.5>
                pos = <-10, 0 , 0>
              create a new Material "Walls"
                Base Map RGB = <79, 79, 79>, metalic=0, smootheness=0.25
              drag it onto the West Wall

              duplicate West Wall -> East Wall, x = 10

              duplicate East Wall -> North Wall, rotY=90, pos=<0,0,10>

            [NOTE:
                creating empty GameObjects for purely hierarchical
                reasons is a nice technique.
            ]

    2.5 Create collectibles

        2.5.2 create a PickUp GameObject
            create Cube "PickUp", 
                pos=<0,0.5,0>, rot=<45,45,45>, scale = <0.5,0.5,0.5>
            dup Background material -> "PickUp"
                rgb = <255,200,0>
            drag it onto the PickUp object


        2.5.3 script to rotate the collectible
            PickUp>Add Component>New Script "Rotator", move into Scripts folder

        2.5.4 turn PickUp object into a Prefab
            [prefab: a template for a (collection of) well attributed GameObject(s),
                     where any change to original is propagated to all instances]

            >>> create folder Assets/Prefabs
            >>> drag PickUp from hierarchy into that folder; rename "Original Prefab"
            GameObject should turn blue in both Prefabs folder and Hierarchy

        2.5.5 instantiate the prefabs around the play area
            create empty GameObject "Pickup Parent"
                pos = <0,0,0>
            drag PickUp object under PickUp parent

            switch to top-down view
            duplicate and place several around the arena

            [I found that I was dragging in the Y axis too, so had to go back
             and reset all Y values to 0.5]

        *** and I am still not sure that I understand what a Prefab is, and how
            it differs from other GameObjects?

    2.6 Make object disappear when they collide w/Player sphere

        2.6.2 disable PickUps w/PlayerController.OnTriggerEnter 
        
        2.6.3 select PickUp prefab, Add Tag, + "PickUp"
              select PickUp prefab, Add Tag "PickUp"
              confirm this tag has been set for all instantiated PickUps

        2.6.4 PlayerController.OnTriggerEnter checks for this tag

        2.6.5 Prefab/PickUp.prefab: isTrigger = true
            conform this has been set for all Instantiated PickUps

            test game and confirm that PickUps disappear when hit

        2.6.6 add RidgidBody to PickUp prefab 
            PickUp prefab>Add Component Rigidbody
                use Gravity = false
                Kinematic = true

        [It is not obvious why we did this? To make box collisions work?]

    2.7 Keep score of collected objects

        2.7.2 add score bumping to PlayerController.OnTriggerEnter

        2.7.3 add a UI>Text>TextMeshPro to the Hierarchy
            this will create Canvas > Text(TMPro) and EventSystem objects in Hierarchy
            rename Text to CountText
            select canvas, 2D, select CountText
                Text Input = "Count Text" (place holder)
                click Rect Transform > anchor preset icon
                    Alt-Shift select top left anchor point
                left Pos X=10, Pos Y=10

            play and see this text now displayed

        2.7.4 add score keeping
            changes to PlayerController
            add ref to TMPro to PlayerController script in Inspector
            select EventSystem , click replace input subsystem to fix warning

        2.7.5 create new You Win text object
            under Canvas, create new TextMeshPro "WinText"
                Text Input = "You Win!"
                Vertex Colr = black
                Font size = 32
                alignment = center
                Rect Transform.pos = <0,100>

            add to PlayerController

            set WinTextObject and numObjects in Inspector

    2.8 Implement AI-based enemy navigation

        2.8.2 Package Manager> Unity Registry > AI Navigation ... Install


    2.9 Build and export the game

    2.10 create a Game Design Document
